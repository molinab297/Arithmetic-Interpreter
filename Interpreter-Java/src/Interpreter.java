/**
 * Class that walks the Abstract Syntax Tree (AST) generated from a {@link Parser} object
 */
public class Interpreter {

    /**
     * Parser object that generates the AST
     */
    private Parser parser;

    /**
     * The root node of the AST
     */
    private ASTNode root;


    /**
     * Constructor requires an AST to traverse, which is generated by the Parser.
     */
    public Interpreter(Parser parser){
        assert(parser != null);
        this.parser = parser;
        root = null;
    }


    /**
     * Generates the AST from the parser and then traverses the AST.
     *
     * @return The result of an arithmetic expression
     */
    int interpret(){
        root = parser.parse();
        return visit(root);
    }


    /**
     * Determines the type of the node being examined and then performs the
     * appropriate method.
     *
     * @return The value of a binary operator node or an integer node.
     */
    int visit(ASTNode node){
        if(node instanceof BinOpNode){
            return visitBinOpNode((BinOpNode)node);
        }
        else if(node instanceof IntNode){
            return visitIntNode((IntNode)node);
        }
        return 0;
    }


    /**
     * Determines the value of a binary operator node
     *
     * @return the value of a left operand and right operand with the binary operator performed
     * on them.
     */
    int visitBinOpNode(BinOpNode node){
        Token.type type = node.getToken().getType();
       switch(type){
           case ADD: return visit(node.getLeftChild()) + visit(node.getRightChild());
           case SUBTRACT: return visit(node.getLeftChild()) - visit(node.getRightChild());
           case MULTIPLY: return visit(node.getLeftChild()) * visit(node.getRightChild());
           case DIVIDE: return visit(node.getLeftChild()) / visit(node.getRightChild());
           default:
               System.out.println("Interpreter: Something very strange happened...");
               System.exit(1);
       }
       return 0;
    }


    /**
     * Determines the value of an integer node
     *
     * @return the value of an integer node
     */
    int visitIntNode(IntNode node){
        return node.getValue();
    }
}
